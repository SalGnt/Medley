<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of what the following rules do, please see the checkstyle configuration page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">

    <!-- Checks that there are no tab characters in the file. -->
    <module name="FileTabCharacter" />

    <module name="NewlineAtEndOfFile" />

    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">

        <!--IMPORT CHECKS -->
        <!-- Checks for redundant import statements. -->
        <module name="RedundantImport">
            <property name="severity" value="error" />
        </module>

        <!-- Checks for out of order import statements. -->
        <module name="ImportOrder">
            <property name="severity" value="warning" />
            <property name="groups" value="java, javax, junit, medley" />

            <!-- This ensures that non-static imports go first. -->
            <property name="option" value="under" />
            <property name="tokens" value="STATIC_IMPORT, IMPORT" />
        </module>


        <!-- JAVADOC CHECKS -->
        <!-- Checks for Javadoc comments. -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="scope" value="protected" />
            <property name="severity" value="warning" />
            <property name="allowMissingJavadoc" value="true" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="allowMissingThrowsTags" value="true" />
            <property name="allowThrowsTagsForSubclasses" value="true" />
            <property name="allowUndeclaredRTE" value="true" />
        </module>

        <module name="JavadocType">
            <property name="scope" value="protected" />
            <property name="severity" value="error" />
        </module>

        <module name="JavadocStyle">
            <property name="severity" value="warning" />
        </module>


        <!-- NAMING CHECKS -->
        <!-- Item 38 - Adhere to generally accepted naming conventions -->

        <!-- Validates identifiers for package names against the supplied expression. -->
        <!-- Here the default checkstyle rule restricts package name parts to seven characters, this is not in line with common practice at Google. -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$" />
            <property name="severity" value="warning" />
        </module>

        <!-- Validates static, final fields against the expression "^[A-Z][a-zA-Z0-9]*$". -->
        <module name="TypeNameCheck">
            <metadata name="altname" value="TypeName" />
            <property name="severity" value="warning" />
        </module>

        <!-- Validates non-private, static, final fields against the supplied public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
        <module name="ConstantNameCheck">
            <metadata name="altname" value="ConstantName" />
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="false" />
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$" />
            <message key="name.invalidPattern" value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)." />
            <property name="severity" value="warning" />
        </module>

        <!-- Validates static, non-final fields against the supplied expression "^[a-z][a-zA-Z0-9]*_?$". -->
        <module name="StaticVariableNameCheck">
            <metadata name="altname" value="StaticVariableName" />
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$" />
            <property name="severity" value="warning" />
        </module>

        <!-- Validates non-static members against the supplied expression. -->
        <module name="MemberNameCheck">
            <metadata name="altname" value="MemberName" />
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="severity" value="warning" />
        </module>

        <!-- Validates identifiers for method names. -->
        <module name="MethodNameCheck">
            <metadata name="altname" value="MethodName" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$" />
            <property name="severity" value="warning" />
        </module>

        <!-- Validates identifiers for method parameters against the expression "^[a-z][a-zA-Z0-9]*$". -->
        <module name="ParameterName">
            <property name="severity" value="warning" />
        </module>

        <!-- Validates identifiers for local final variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
        <module name="LocalFinalVariableName">
            <property name="severity" value="warning" />
        </module>

        <!-- Validates identifiers for local variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
        <module name="LocalVariableName">
            <property name="severity" value="warning" />
        </module>


        <!-- LENGTH and CODING CHECKS -->
        <module name="LineLength">
            <!-- Checks if a line is too long. -->
            <property name="max" value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.max}" default="80"/>
            <property name="severity" value="error" />

            <!-- The default ignore pattern exempts the following elements:
                - import statements
                - long URLs inside comments
            -->
            <property name="ignorePattern" value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}" default="^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$" />
        </module>

        <!-- Checks for placement of the left curly brace ('{'). -->
        <module name="LeftCurly">
            <property name="severity" value="warning" />
        </module>

        <module name="RightCurly">
            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
              the same line. e.g., the following example is fine:
                <pre>
                    if {
                      ...
                    } else
                </pre>
            -->
            <!-- This next example is not fine:
                <pre>
                    if {
                      ...
                    }
                    else
                </pre>
            -->
            <property name="option" value="same" />
            <property name="severity" value="warning" />
        </module>

        <!-- Checks for braces around if and else blocks -->
        <module name="NeedBraces">
            <property name="severity" value="warning" />
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO" />
        </module>

        <!-- Checks that long constants are defined with an upper ell.
        <module name="UpperEll">
            <property name="severity" value="error"/>
        </module> -->

        <!-- Warn about falling through to the next case statement.  Similar to javac -Xlint:fallthrough, but the check is suppressed if a single-line comment on the last non-blank line preceding the fallen-into case contains 'fall through' (or some other variants which we don't publicized to promote consistency). -->
        <module name="FallThrough">
            <property name="reliefPattern" value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on" />
            <property name="severity" value="error" />
        </module>


        <!-- MODIFIERS CHECKS -->
        <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and 8.4.3.  The prescribed order is: public, protected, private, abstract, static, final, transient, volatile, synchronized, native, strictfp -->
        <module name="ModifierOrder" />


        <!-- WHITESPACE CHECKS -->
        <!-- Checks that various tokens are surrounded by whitespace. This includes most binary operators and keywords followed by regular or curly braces. -->
        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN" />
            <property name="severity" value="error" />
        </module>

        <!-- Checks that commas, semicolons and typecasts are followed by whitespace. -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
        </module>

        <!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <!-- Checks that there is no whitespace before close parens or after open parens. -->
        <module name="ParenPad">
            <property name="severity" value="warning" />
        </module>

    </module>
</module>
